# Set working directory to current script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Load data ---------------------------------------------------------------
read_all_json <- function()
{
participant_folders = list.dirs("../data/LarsAnniek/")[-1]
df = data.frame()
for (participant in participants_folders)
{
participant_name = basename(participant)
search_pattern = paste(participant,"/*.json", sep="")
print(search_pattern)
file_names <- Sys.glob(search_pattern)
print(file_names)
file_numbers <- seq(file_names)
for (file_number in file_numbers)
{
data <- fromJSON(file = file_names[file_number])
participant_name = participant_name
advertisement = data$AdvertisementDirection
end_x = round(data$Events$End$EndLocation$X, 2)
end_y = round(data$Events$End$EndLocation$Y, 2)
goalkeeper_position = round(data$GoalkeeperDisplacement, 2)
new_observations = cbind(participant_name, advertisement, goalkeeper_position, end_x, end_y)
df <- rbind(df, new_observations)
}
df$end_x <- as.numeric(as.character(df$end_x))
df$end_y <- as.numeric(as.character(df$end_y))
df$goalkeeper_position <- as.numeric(as.character(df$goalkeeper_position))
}
return(df)
}
df = read_all_json()
read_all_json <- function()
{
participants_folders = list.dirs("../data/LarsAnniek/")[-1]
df = data.frame()
for (participant in participants_folders)
{
participant_name = basename(participant)
search_pattern = paste(participant,"/*.json", sep="")
print(search_pattern)
file_names <- Sys.glob(search_pattern)
print(file_names)
file_numbers <- seq(file_names)
for (file_number in file_numbers)
{
data <- fromJSON(file = file_names[file_number])
participant_name = participant_name
advertisement = data$AdvertisementDirection
end_x = round(data$Events$End$EndLocation$X, 2)
end_y = round(data$Events$End$EndLocation$Y, 2)
goalkeeper_position = round(data$GoalkeeperDisplacement, 2)
new_observations = cbind(participant_name, advertisement, goalkeeper_position, end_x, end_y)
df <- rbind(df, new_observations)
}
df$end_x <- as.numeric(as.character(df$end_x))
df$end_y <- as.numeric(as.character(df$end_y))
df$goalkeeper_position <- as.numeric(as.character(df$goalkeeper_position))
}
return(df)
}
df = read_all_json()
# Load workspace ----------------------------------------------------------
library(rjson)
library(rstudioapi)
# Clear environment variables
rm(list=ls())
# Clear console commands
cat("\014")
# Set working directory to current script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Load data ---------------------------------------------------------------
read_all_json <- function()
{
participants_folders = list.dirs("../data/LarsAnniek/")[-1]
df = data.frame()
for (participant in participants_folders)
{
participant_name = basename(participant)
search_pattern = paste(participant,"/*.json", sep="")
print(search_pattern)
file_names <- Sys.glob(search_pattern)
print(file_names)
file_numbers <- seq(file_names)
for (file_number in file_numbers)
{
data <- fromJSON(file = file_names[file_number])
participant_name = participant_name
advertisement = data$AdvertisementDirection
end_x = round(data$Events$End$EndLocation$X, 2)
end_y = round(data$Events$End$EndLocation$Y, 2)
goalkeeper_position = round(data$GoalkeeperDisplacement, 2)
new_observations = cbind(participant_name, advertisement, goalkeeper_position, end_x, end_y)
df <- rbind(df, new_observations)
}
df$end_x <- as.numeric(as.character(df$end_x))
df$end_y <- as.numeric(as.character(df$end_y))
df$goalkeeper_position <- as.numeric(as.character(df$goalkeeper_position))
}
return(df)
}
df = read_all_json()
View(df)
# Run multilevel ----------------------------------------------------------
formula_m1 <- "end_x ~ goalkeeper_position + advertisement + goalkeeper_position:advertisement + (1 | id)"
m1 <- lme4::glmer(formula_m1, data=df)
m1 <- lme4::lmer(formula_m1, data=df)
# Run multilevel ----------------------------------------------------------
formula_m1 <- "end_x ~ goalkeeper_position + advertisement + goalkeeper_position:advertisement + (1 | participant_name)"
m1 <- lme4::lmer(formula_m1, data=df)
# Results
tab_model(m1)
library(sjPlot)
# Results
tab_model(m1)
summary(m1)
coef(summary(m1))
# Plot --------------------------------------------------------------------
plot_model(m1)
df_short = subset(df, advertisement!=None)
df_short = subset(df, advertisement!="None")
df_raw = df
df = subset(df_raw, advertisement!="None")
# Run multilevel ----------------------------------------------------------
formula_m1 <- "end_x ~ goalkeeper_position + advertisement + goalkeeper_position:advertisement + (1 | participant_name)"
m1 <- lme4::lmer(formula_m1, data=df)
# Results
tab_model(m1)
summary(m1)
coef(summary(m1))
# Plot --------------------------------------------------------------------
plot_model(m1)
df["direction"] = df[df$end_x > 0, ]
df["direction"] = df[df$end_x > 0]
df["direction"] = df$end_x[df$end_x > 0]
df = df %>% mutate(
direction = ifelse(end_x > 0, "Right", "Left")
)
# Clean up data -----------------------------------------------------------
library(dplyr)
df = df %>% mutate(
direction = ifelse(end_x > 0, "Right", "Left")
)
# Run multilevel on Direction ---------------------------------------------
formula_m1 <- "direction ~ goalkeeper_position + advertisement + goalkeeper_position:advertisement + (1 | participant_name)"
m1 <- lme4::lmer(formula_m1, data=df)
# Results
tab_model(m1)
summary(m1)
coef(summary(m1))
plot_model(m1)
m1 <- lme4::glmer(formula_m1, data=df, family = binomial(link = "logit")))
m1 <- lme4::glmer(formula_m1, data=df, family = binomial(link = "logit"))
# Results
tab_model(m1)
summary(m1)
coef(summary(m1))
plot_model(m1)
# Results
tab_model(m1)
# Run multilevel ----------------------------------------------------------
formula_m1 <- "end_x ~ goalkeeper_position + advertisement + goalkeeper_position:advertisement + (1 | participant_name)"
m1 <- lme4::lmer(formula_m1, data=df)
# Results
tab_model(m1)
# Run multilevel on Direction ---------------------------------------------
formula_m1 <- "direction ~ goalkeeper_position + advertisement + goalkeeper_position:advertisement + (1 | participant_name)"
m1 <- lme4::glmer(formula_m1, data=df, family = binomial(link = "logit"))
# Results
tab_model(m1)
# Run multilevel ----------------------------------------------------------
formula_m1 <- "end_x ~ goalkeeper_position + advertisement + goalkeeper_position:advertisement + (1 | participant_name)"
m1 <- lme4::lmer(formula_m1, data=df)
# Results
tab_model(m1)
summary(m1)
coef(summary(m1))
plot_model(m1)
m2 <- lme4::glmer(formula_m1, data=df, family = binomial(link = "logit"))
df = subset(df_raw, advertisement!="None")
df = df %>% mutate(
direction = ifelse(end_x > 0, 1, 0)
)
# Run multilevel ----------------------------------------------------------
formula_m1 <- "end_x ~ goalkeeper_position + advertisement + goalkeeper_position:advertisement + (1 | participant_name)"
m1 <- lme4::lmer(formula_m1, data=df)
# Results
tab_model(m1)
summary(m1)
coef(summary(m1))
plot_model(m1)
# Run multilevel on Direction ---------------------------------------------
formula_m1 <- "direction ~ goalkeeper_position + advertisement + goalkeeper_position:advertisement + (1 | participant_name)"
m2 <- lme4::glmer(formula_m1, data=df, family = binomial(link = "logit"))
m1 <- lme4::glmer(formula_m1, data=df, family = binomial(link = "logit"))
# Results
tab_model(m1)
summary(m1)
coef(summary(m1))
plot_model(m1)
# Predictions
plot_model(m1, type = "pred")
p1 <- plot_model(
m1,
type = "pred",
terms = c("goalkeeper_position", "advertisement"),
colors = "bw",
title = "",
axis.title = list(
"Direction last scan: Left / Right",
"Probability of first contact with right foot"),
std.est = "std2",
axis.tickslen = 4,
margin(t = 0, r= 0 , b= 0, l = 100, unit = "pt")
) +
scale_x_continuous(
"Direction of last VE scan",
labels = c("0" = "Left", "1" = "Right"),
breaks = c(0, 1)) +
scale_y_continuous(
limits = c(0, 1),
breaks = c(0, 0.5, 1),
labels = c("0%", "50%", "100%")) +
theme(
plot.margin = unit(
c(0,0,1,1.5),
"cm")) # Add some space on left and bottom of plot
p1 <- plot_model(
m1,
type = "pred",
terms = c("goalkeeper_position", "advertisement"),
colors = "bw",
title = "",
# axis.title = list(
#   "Direction last scan: Left / Right",
#   "Probability of first contact with right foot"),
std.est = "std2",
axis.tickslen = 4,
margin(t = 0, r= 0 , b= 0, l = 100, unit = "pt")
) +
scale_x_continuous(
"Direction of last VE scan",
labels = c("0" = "Left", "1" = "Right"),
breaks = c(0, 1)) +
scale_y_continuous(
limits = c(0, 1),
breaks = c(0, 0.5, 1),
labels = c("0%", "50%", "100%")) +
theme(
plot.margin = unit(
c(0,0,1,1.5),
"cm")) # Add some space on left and bottom of plot
print(p1)
# Predictions
plot_model(
m1,
type = "pred"
terms = c("goalkeeper_position", "advertisement"),
)
# Predictions
plot_model(
m1,
type = "pred",
terms = c("goalkeeper_position", "advertisement"),
)
p1 <- plot_model(
m1,
type = "pred",
terms = c("advertisement", "goalkeeper_position"),
colors = "bw",
title = "",
# axis.title = list(
#   "Direction last scan: Left / Right",
#   "Probability of first contact with right foot"),
std.est = "std2",
axis.tickslen = 4,
margin(t = 0, r= 0 , b= 0, l = 100, unit = "pt")
)
# Predictions
plot_model(
m1,
type = "pred",
terms = c("advertisement", "goalkeeper_position"),
)
# Predictions
plot_model(
m1,
type = "pred",
terms = c("advertisement", "goalkeeper_position")
)
# Predictions
plot_model(
m1,
type = "pred",
terms = c("advertisement", "goalkeeper_position")
)
# Results
tab_model(m1)
summary(m1)
coef(summary(m1))
plot_model(m1)
# Predictions
plot_model(
m1,
type = "pred",
terms = c("advertisement", "goalkeeper_position")
)
# Predictions
plot_model(
m1,
type = "pred",
terms = c("goalkeeper_position")
)
# Predictions
plot_model(
m1,
type = "pred",
)
# Predictions
plot_model(
m1,
type = "pred"
)
# Predictions
plot_model(
m1,
type = "pred",
terms = c("advertisement", "goalkeeper_position")
)
# Run multilevel on Direction ---------------------------------------------
formula_m1 <- "direction ~ goalkeeper_position + advertisement + goalkeeper_position:advertisement + (goalkeeper_position | participant_name)"
m1 <- lme4::glmer(formula_m1, data=df, family = binomial(link = "logit"))
# Results
tab_model(m1)
summary(m1)
coef(summary(m1))
plot_model(m1)
# Predictions
plot_model(
m1,
type = "pred",
terms = c("advertisement", "goalkeeper_position")
)
# Predictions
plot_model(
m1,
type = "pred",
terms = c("advertisement", "goalkeeper_position")
)
# Create some subset ------------------------------------------------------
df_ads_to_right = df[df$advertisement == "Right"]
# Create some subset ------------------------------------------------------
df_ads_to_right = df[df$advertisement == "Right", ]
# Create some subset ------------------------------------------------------
df_ads_to_right = df[df$advertisement == "Right", ]
formula_m1 <- "end_x ~ goalkeeper_position + advertisement + goalkeeper_position:advertisement + (1 | participant_name)"
m1 <- lme4::lmer(formula_m1, data=df_right)
formula_m1 <- "end_x ~ goalkeeper_position + (1 | participant_name)"
m1 <- lme4::lmer(formula_m1, data=df_right)
tab_model(m1)
m1 <- lme4::lmer(formula_m1, data=df_ads_to_right)
tab_model(m1)
abs(-1)
df = df %>% mutate(
direction = ifelse(end_x > 0, 1, 0),
gk_distance_from_center = abs(goalkeeper_position)
)
# Run multilevel on distance from center ---------------------------------------------
formula_m1 <- "direction ~ gk_distance_from_center + advertisement + gk_distance_from_center:advertisement + (1 | participant_name)"
m1 <- lme4::glmer(formula_m1, data=df, family = binomial(link = "logit"))
# Results
tab_model(m1)
plot_model(m1)
# Predictions
plot_model(
m1,
type = "pred",
terms = c("advertisement", "goalkeeper_position")
)
# Predictions
plot_model(
m1,
type = "pred",
terms = c("advertisement", "gk_distance_from_center")
)
